name: PHP Unit Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version: ['8.2', '8.3']
    name: PHP ${{ matrix.php-version }} Tests
    env:
      APP_KEY: ${{ secrets.APP_KEY }}

    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: ${{ matrix.php-version }}
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ hashFiles('composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-version }}-composer-
            ${{ runner.os }}-php-${{ matrix.php-version }}-
            ${{ runner.os }}-
      - name: Cache Composer downloads
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-cache-${{ hashFiles('composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-version }}-composer-cache-
            ${{ runner.os }}-php-${{ matrix.php-version }}-
            ${{ runner.os }}-
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite
      - name: Setup Node.js and build assets
        uses: ./.github/actions/build-assets
      - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: php artisan test

  coverage:
    needs: tests
    runs-on: ubuntu-latest
    name: PHP 8.4 - Coverage
    env:
      APP_KEY: ${{ secrets.APP_KEY }}

    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: '8.4'
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-8.4-composer-${{ hashFiles('composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-8.4-composer-
            ${{ runner.os }}-php-8.4-
            ${{ runner.os }}-
      - name: Cache Composer downloads
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-php-8.4-composer-cache-${{ hashFiles('composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-8.4-composer-cache-
            ${{ runner.os }}-php-8.4-
            ${{ runner.os }}-
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite
      - name: Setup Node.js and build assets
        uses: ./.github/actions/build-assets
      - name: Execute tests with coverage
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: php -dxdebug.mode=coverage artisan test tests/Feature --coverage-clover=coverage.xml
      - name: Create PHP coverage badge
        if: github.ref == 'refs/heads/main'
        uses: timkrase/phpunit-coverage-badge@v1.2.1
        with:
          report: coverage.xml
          coverage_badge_path: output/php-coverage.svg
          push_badge: false
      - name: Customize PHP coverage badge label
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p badge-output
          if [ -f output/php-coverage.svg ]; then
            cp output/php-coverage.svg badge-output/php-coverage.svg
            sed -i 's/Coverage/PHP Coverage/' badge-output/php-coverage.svg
          fi
      - name: Upload PHP coverage report
        uses: actions/upload-artifact@v4
        with:
          name: php-coverage-report
          path: coverage.xml
      - name: Upload PHP coverage badge
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: php-coverage-badge
          path: badge-output/php-coverage.svg
          if-no-files-found: ignore

  js-coverage:
    needs: tests
    runs-on: ubuntu-latest
    name: JS Coverage

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install Node dependencies
        run: npm ci
      - name: Run Jest tests with coverage
        run: npm test -- --coverage --coverageReporters=json-summary --coverageDirectory=coverage
      - name: Create JS coverage badge
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p output
          if [ -f "coverage/coverage-summary.json" ]; then
            npx --yes make-coverage-badge --report-path=coverage/coverage-summary.json --output-path=output/js-coverage.svg
            sed -i 's/Coverage/JS Coverage/' output/js-coverage.svg
          fi
      - name: Upload JS coverage summary
        uses: actions/upload-artifact@v4
        with:
          name: js-coverage-summary
          path: coverage/coverage-summary.json
      - name: Upload JS coverage badge
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: js-coverage-badge
          path: output/js-coverage.svg
          if-no-files-found: ignore

  deploy-coverage:
    needs:
      - coverage
      - js-coverage
    runs-on: ubuntu-latest

    steps:
      - name: Determine deployment target
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "Coverage artifacts will be deployed to the image-data branch."
          else
            echo "Deployment skipped: coverage artifacts are only published for push events on the main branch."
          fi
      - name: Download PHP coverage badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/download-artifact@v4
        with:
          name: php-coverage-badge
          path: artifacts/php/badge
      - name: Download JS coverage badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/download-artifact@v4
        with:
          name: js-coverage-badge
          path: artifacts/js/badge
      - name: Download JS coverage summary
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/download-artifact@v4
        with:
          name: js-coverage-summary
          path: artifacts/js/summary
      - name: Download PHP coverage report
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/download-artifact@v4
        with:
          name: php-coverage-report
          path: artifacts/php/report
      - name: Prepare deployment directory
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          mkdir -p output

          if [ -d artifacts/js/badge ]; then
            js_badge=$(find artifacts/js/badge -name 'js-coverage.svg' -print -quit)
            if [ -n "$js_badge" ]; then
              cp "$js_badge" output/js-coverage.svg
            fi
          fi

          if [ -d artifacts/php/badge ]; then
            php_badge=$(find artifacts/php/badge -name 'php-coverage.svg' -print -quit)
            if [ -n "$php_badge" ]; then
              cp "$php_badge" output/php-coverage.svg
            fi
          fi

          if [ -d artifacts/js/summary ]; then
            js_summary=$(find artifacts/js/summary -name 'coverage-summary.json' -print -quit)
            if [ -n "$js_summary" ]; then
              mkdir -p output/coverage
              cp "$js_summary" output/coverage/coverage-summary.json
            fi
          fi

          if [ -d artifacts/php/report ]; then
            php_report=$(find artifacts/php/report -name 'coverage.xml' -print -quit)
            if [ -n "$php_report" ]; then
              cp "$php_report" output/coverage.xml
            fi
          fi
      - name: Deploy coverage artifacts to image-data branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          publish_dir: ./output
          publish_branch: image-data
          github_token: ${{ secrets.GITHUB_TOKEN }}

