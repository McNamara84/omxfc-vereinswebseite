name: PHP Unit Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version: ['8.2', '8.3']
    name: PHP ${{ matrix.php-version }} Tests
    env:
      APP_KEY: ${{ secrets.APP_KEY }}

    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: ${{ matrix.php-version }}
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite
      - name: Setup Node.js and build assets
        uses: ./.github/actions/build-assets
      - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: php artisan test

  coverage:
    needs: tests
    runs-on: ubuntu-latest
    name: PHP 8.4 - Coverage
    env:
      APP_KEY: ${{ secrets.APP_KEY }}

    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: '8.4'
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite
      - name: Setup Node.js and build assets
        uses: ./.github/actions/build-assets
      - name: Execute tests with coverage
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: php -dxdebug.mode=coverage artisan test tests/Feature --coverage-clover=coverage.xml
      - name: Run Jest tests with coverage
        run: npm test -- --coverage --coverageReporters=json-summary --coverageDirectory=coverage
      - name: Create JS coverage badge
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p output
          if [ -f "coverage/coverage-summary.json" ]; then
            npx --yes make-coverage-badge --report-path=coverage/coverage-summary.json --output-path=output/js-coverage.svg
            sed -i 's/Coverage/JS Coverage/' output/js-coverage.svg
          fi
      - name: Create PHP coverage badge
        if: github.ref == 'refs/heads/main'
        uses: timkrase/phpunit-coverage-badge@v1.2.1
        with:
          report: coverage.xml
          coverage_badge_path: output/php-coverage.svg
          push_badge: false
      - name: Customize PHP coverage badge label
        if: github.ref == 'refs/heads/main'
        run: |
          if [ -f output/php-coverage.svg ]; then
            sed -i 's/Coverage/PHP Coverage/' output/php-coverage.svg
          fi
      - name: Deploy coverage badges to image-data branch
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          publish_dir: ./output
          publish_branch: image-data
          github_token: ${{ secrets.GITHUB_TOKEN }}

