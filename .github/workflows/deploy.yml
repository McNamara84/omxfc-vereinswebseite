name: Build and Deploy
on:
  push:
    branches: [ main ]
permissions:
  contents: read
  packages: write
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          no-cache: true
          tags: ghcr.io/mcnamara84/omxfc-vereinswebseite:latest
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd /root/maddrax-fanclub
            
            echo "Pulling new images..."
            docker compose pull
            
            echo "Removing old containers..."
            docker compose down --remove-orphans

            echo "Removing app_data volume to ensure fresh assets..."
            docker volume rm maddrax-fanclub_app_data || true
            
            echo "Starting containers with new images..."
            docker compose up -d --force-recreate
            
            echo "Waiting for containers to start..."
            sleep 15
            
            echo "Checking container status:"
            docker ps -a
            
            echo "Waiting for database to be ready..."
            for i in {1..30}; do
              if docker exec maddrax-db mariadb -u root -pNochSicherer456 -e "SELECT 1" >/dev/null 2>&1; then
                echo "Database is ready!"
                break
              fi
              echo "Waiting for database... ($i/30)"
              sleep 2
            done
            
            echo "Running Laravel setup commands..."
            
            # Erstelle den Storage-Link
            docker exec maddrax-app php artisan storage:link || true
            
            # F√ºhre Migrationen aus
            if docker exec maddrax-app php artisan migrate --force; then
              echo "Migrations completed successfully"
            else
              echo "Migration failed, checking logs..."
              docker logs maddrax-app
              exit 1
            fi
            
            # Cache-Management - optimiert f√ºr neue Architektur
            echo "Optimizing Laravel..."
            docker exec maddrax-app php artisan optimize:clear
            docker exec maddrax-app php artisan config:cache
            docker exec maddrax-app php artisan route:cache
            docker exec maddrax-app php artisan view:cache
            
            # Berechtigungen setzen
            echo "Setting permissions..."
            docker exec maddrax-app chown -R www-data:www-data /var/www/html/storage
            docker exec maddrax-app chmod -R 775 /var/www/html/storage
            
            # Gesundheitschecks
            echo "Running health checks..."
            
            echo "=== Container Status ==="
            docker ps
            
            echo "=== Testing connectivity ==="
            if curl -f http://localhost:8080 >/dev/null 2>&1; then
              echo "‚úÖ Local connectivity test: PASSED"
            else
              echo "‚ùå Local connectivity test: FAILED"
              echo "Container logs for debugging:"
              echo "=== Nginx logs ==="
              docker logs --tail=20 maddrax-nginx
              echo "=== App logs ==="
              docker logs --tail=20 maddrax-app
              exit 1
            fi
            
            echo "=== Verifying Livewire assets ==="
            if docker exec maddrax-app test -f /var/www/html/public/vendor/livewire/livewire.js; then
              echo "‚úÖ Livewire assets: FOUND"
            else
              echo "‚ùå Livewire assets: MISSING"
              echo "Re-publishing Livewire assets..."
              docker exec maddrax-app php artisan vendor:publish --tag=livewire:assets --force
            fi
            
            echo "üöÄ Deployment completed successfully!"