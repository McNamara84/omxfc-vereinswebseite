name: Unit Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_testing
        ports:
          - "3306:3306"
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    env:
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: laravel_testing
      DB_USERNAME: root
      DB_PASSWORD: password

    name: PHP 8.4 - Feature Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo, pdo_mysql, xdebug
        coverage: xdebug
        tools: composer:v2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader --no-interaction

    - name: Install NPM dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 755 storage bootstrap/cache
    - name: Run migrations
      run: php artisan migrate --force

    - name: Run feature tests with coverage
      env:
        XDEBUG_MODE: coverage
      run: php artisan test tests/Feature --coverage-clover=coverage.xml

    - name: Run Jest tests with coverage
      run: npm test -- --coverage --coverageReporters=json-summary --coverageDirectory=coverage

    - name: Create JS coverage badge
      if: github.ref == 'refs/heads/main'
      run: |
        mkdir -p output
        if [ ! -f "coverage/coverage-summary.json" ]; then
          echo "coverage/coverage-summary.json not found" >&2
          exit 1
        fi
        npx --yes make-coverage-badge --report-path=coverage/coverage-summary.json --output-path=output/js-coverage.svg
        if [ ! -f output/js-coverage.svg ]; then
          echo "JS coverage badge was not created" >&2
          exit 1
        fi
        sed -i 's/Coverage/JS Coverage/' output/js-coverage.svg

    - name: Create PHP coverage badge
      if: github.ref == 'refs/heads/main'
      uses: timkrase/phpunit-coverage-badge@v1.2.1
      with:
        report: coverage.xml
        coverage_badge_path: output/php-coverage.svg
        push_badge: false

    - name: Customize PHP coverage badge label
      if: github.ref == 'refs/heads/main'
      run: |
        if [ -f output/php-coverage.svg ]; then
          sed -i 's/Coverage/PHP Coverage/' output/php-coverage.svg
        else
          echo "PHP coverage badge was not created" >&2
          exit 1
        fi

    - name: Deploy coverage badges to image-data branch
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        publish_dir: ./output
        publish_branch: image-data
        github_token: ${{ secrets.GITHUB_TOKEN }}
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
